#!/usr/bin/env bash
set -euo pipefail

# ---------------------------------------------
# Configuration
# ---------------------------------------------
BOOTSTRAP_CONTAINER="bootstrap"
KAFKA_SERVICES=("zookeeper" "kafka" "schema-registry")
EVENTS=("add_to_cart,purchase,product_view,search")

# ---------------------------------------------
# Functions
# ---------------------------------------------

# Placeholder art
ascii_ready() {
cat << "EOF"

██████╗ ███████╗ █████╗ ██████╗ ██╗   ██╗    ███████╗ ██████╗ 
██╔══██╗██╔════╝██╔══██╗██╔══██╗╚██╗ ██╔╝    ██╔════╝██╔═══██╗
██████╔╝█████╗  ███████║██████╔╝ ╚████╔╝     █████╗  ██║   ██║
██╔═══╝ ██╔══╝  ██╔══██║██╔═══╝   ╚██╔╝      ██╔══╝  ██║   ██║
██║     ███████╗██║  ██║██║        ██║       ███████╗╚██████╔╝
╚═╝     ╚══════╝╚═╝  ╚═╝╚═╝        ╚═╝       ╚══════╝ ╚═════╝ 
                                                            
                  READY FOR INSIGHTS 🚀
EOF
}

usage() {
    echo "Usage: $0 <command>"
    echo ""
    echo "Commands:"
    echo "  bootstrap        Create Kafka topics and register schemas"
    echo "  produce <events> Start a producer to send a list of events to platform"
    echo "  status           Check status of Kafka, Zookeeper, and Schema Registry"
    echo "  logs <name>      Tail logs for a producer service (default: ${PRODUCERS[0]})"
    echo "  help             Show this help message"
    echo ""
    echo "Example:"
    echo "  $0 bootstrap"
    echo "  $0 produce add_to_cart,purchase,product_view,search"
    echo "  $0 logs producer-<container_id>"
}

bootstrap() {
    echo "🚀 Bootstrapping Kafka environment..."
    docker compose run --rm "$BOOTSTRAP_CONTAINER"
    ascii_ready
    echo "✅ Kafka environment is ready to stream!"
    echo "Start a producer with:"
    echo "  bin/stream produce ${EVENTS}"
}

produce() {
    local events=${1:-${EVENTS}}
    echo "Starting a producer to emit $events"
    docker compose run --rm producer python main.py --events $events
}

status() {
    echo "📊 Checking Kafka environment..."
    docker compose ps
}

logs() {
    local service="${1}"
    echo "📄 Tailing logs for $service..."
    docker compose logs -f "$service"
}

# ---------------------------------------------
# CLI argument parsing
# ---------------------------------------------
if [ $# -lt 1 ]; then
    usage
    exit 1
fi

case "$1" in
    bootstrap)
        bootstrap
        ;;
    produce)
        produce
        ;;
    status)
        status
        ;;
    logs)
        logs "${2:-}"
        ;;
    help)
        usage
        ;;
    *)
        echo "Unknown command: $1"
        usage
        exit 1
        ;;
esac
